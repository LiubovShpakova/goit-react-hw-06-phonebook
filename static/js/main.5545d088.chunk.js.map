{"version":3,"sources":["components/ContactList/ContactList.module.css","components/Filter/Filter.module.css","redux/contacts/actions.jsx","components/Form/Form.jsx","components/Filter/Filter.jsx","components/ContactList/ContactList.jsx","App.js","redux/contacts/reduser.jsx","redux/store.jsx","index.js","components/Form/Form.module.css"],"names":["module","exports","addContact","createAction","name","number","payload","id","uuidv4","deleteContact","changeFilter","Form","state","nameInputId","numberInputId","handleChange","e","currentTarget","value","setState","createContact","props","items","sameName","find","el","toLowerCase","sameNumber","alert","handleSubmit","preventDefault","reset","className","style","form","onSubmit","this","htmlFor","label","type","input","onChange","placeholder","pattern","title","required","button","Component","connect","contacts","dispatch","contact","Filter","defaultProps","filter","target","normalizedFilter","includes","getVisibleContacts","onDeleteContact","length","contact__container","map","contact_list","onClick","App","createReducer","_","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","contactsPersistConfig","key","storage","blacklist","store","configureStore","reducer","persistReducer","contactReducer","devTools","process","persistor","persistStore","ReactDOM","render","StrictMode","loading","document","getElementById"],"mappings":"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","file":"static/js/main.5545d088.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contact_list\":\"ContactList_contact_list__Ks66o\",\"contact__container\":\"ContactList_contact__container__3Dlvo\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"input\":\"Filter_input__10vaU\"};","import { v4 as uuidv4 } from \"uuid\";\r\nimport { createAction } from \"@reduxjs/toolkit\";\r\n\r\nexport const addContact = createAction(\"contacts/add\", (name, number) => ({\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n}));\r\n\r\nexport const deleteContact = createAction(\"contacts/delete\");\r\n\r\nexport const changeFilter = createAction(\"contacts/filter\");\r\n\r\n/*export const addContact = (name, number) => ({\r\n  type: \"phoneBook/addContact\",\r\n  payload: {\r\n    id: uuidv4(),\r\n    name,\r\n    number,\r\n  },\r\n});\r\n\r\nexport const deleteContact = (contactId) => ({\r\n  type: \"phoneBook/deleteContact\",\r\n  payload: contactId,\r\n});\r\n\r\nexport const changeFilter = (value) => ({\r\n  type: \"phoneBook/changeFilter\",\r\n  payload: value,\r\n});*/\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport { addContact } from \"../../redux/contacts/actions\";\r\nimport { v4 as uuidv4 } from \"uuid\";\r\nimport style from \"./Form.module.css\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass Form extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  nameInputId = uuidv4();\r\n  numberInputId = uuidv4();\r\n\r\n  handleChange = (e) => {\r\n    const { name, value } = e.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n  createContact = () => {\r\n    const { name, number } = this.state;\r\n    const { addContact, items } = this.props;\r\n\r\n    const sameName = items.find(\r\n      (el) => el.name.toLowerCase() === name.toLowerCase()\r\n    );\r\n    const sameNumber = items.find((el) => el.number === number);\r\n    if (sameName || sameNumber) {\r\n      alert(`${name} or ${number} is already in contacts`);\r\n    }\r\n    return addContact(name, number);\r\n  };\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    this.createContact();\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <form className={style.form} onSubmit={this.handleSubmit}>\r\n        <label htmlFor={this.nameInputId} className={style.label}>\r\n          Name\r\n          <input\r\n            type=\"text\"\r\n            id={this.nameInputId}\r\n            className={style.input}\r\n            name=\"name\"\r\n            value={this.state.name}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter contact name\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <label htmlFor={this.numberInputId} className={style.label}>\r\n          Number\r\n          <input\r\n            type=\"text\"\r\n            id={this.numberInputId}\r\n            className={style.input}\r\n            name=\"number\"\r\n            value={this.state.number}\r\n            onChange={this.handleChange}\r\n            placeholder=\"enter contact number\"\r\n            pattern=\"(\\+?( |-|\\.)?\\d{1,2}( |-|\\.)?)?(\\(?\\d{3}\\)?|\\d{3})( |-|\\.)?(\\d{3}( |-|\\.)?\\d{4})\"\r\n            title=\"Номер телефона должен состоять из 11-12  цифр и может содержать цифры, пробелы, тире, пузатые скобки и может начинаться с +\"\r\n            required\r\n          />\r\n        </label>\r\n\r\n        <button type=\"submit\" className={style.button}>\r\n          Add contact\r\n        </button>\r\n      </form>\r\n    );\r\n  }\r\n}\r\nconst mapStateToProps = ({ contacts }) => ({\r\n  items: contacts.items,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onSubmit: (contact) => dispatch(addContact(contact)),\r\n});\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Form);\r\nForm.propTypes = { onSubmit: PropTypes.func.isRequired };\r\n","import { connect } from \"react-redux\";\r\nimport { changeFilter } from \"../../redux/contacts/actions\";\r\nimport PropTypes from \"prop-types\";\r\nimport style from \"./Filter.module.css\";\r\n\r\nconst Filter = ({ value, onChange }) => (\r\n  <>\r\n    <h3>Find Contacts By Name</h3>\r\n    <label className={style.label}>\r\n      <input\r\n        className={style.input}\r\n        type=\"text\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  </>\r\n);\r\n\r\nFilter.defaultProps = {\r\n  value: \"\",\r\n};\r\nFilter.propTypes = {\r\n  value: PropTypes.string,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  value: state.contacts.filter,\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onChange: (e) => dispatch(changeFilter(e.target.value)),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\r\n","import { connect } from \"react-redux\";\r\nimport { deleteContact } from \"../../redux/contacts/actions\";\r\n// import PropTypes from \"prop-types\";\r\nimport style from \"./ContactList.module.css\";\r\n\r\nconst ContactList = ({ items, onDeleteContact }) => {\r\n  return (\r\n    items.length > 0 && (\r\n      <ul className={style.contact__container}>\r\n        {items.map(({ id, name, number }) => {\r\n          return (\r\n            <li className={style.contact_list} key={id}>\r\n              {name}: {number}\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => onDeleteContact(id)}\r\n                className={style.button}\r\n              >\r\n                Delete\r\n              </button>\r\n            </li>\r\n          );\r\n        })}\r\n      </ul>\r\n    )\r\n  );\r\n};\r\nconst getVisibleContacts = (contacts, filter) => {\r\n  const normalizedFilter = filter.toLowerCase();\r\n  return contacts.filter((contact) =>\r\n    contact.name.toLowerCase().includes(normalizedFilter)\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  const { items, filter } = state.contacts;\r\n  const visibleContacts = getVisibleContacts(items, filter);\r\n  return { items: visibleContacts };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  onDeleteContact: (id) => dispatch(deleteContact(id)),\r\n});\r\n\r\n/*ContactList.propTypes = {\r\n  items: PropTypes.arrayOf(\r\n    PropTypes.shape({\r\n      id: PropTypes.string.isRequired,\r\n      name: PropTypes.string.isRequired,\r\n      number: PropTypes.string.isRequired,\r\n    })\r\n  ),\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};*/\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","import ContactForm from \"./components/Form/Form\";\nimport Filter from \"./components/Filter/Filter\";\nimport ContactList from \"./components/ContactList/ContactList\";\nimport \"./App.css\";\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Phonebook</h1>\n      <ContactForm />\n      <h2>Contacts</h2>\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\nexport default App;\n\n/*class App extends Component {\n  state = {\n    contacts: [],\n    filter: \"\",\n  };\n  componentDidMount() {\n    const contacts = localStorage.getItem(\"contacts\");\n    const parsedContacts = JSON.parse(contacts);\n    if (parsedContacts) {\n      this.setState({ contacts: parsedContacts });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const nextContacts = this.state.contacts;\n    const prevContacts = prevState.contacts;\n\n    if (nextContacts !== prevContacts) {\n      localStorage.setItem(\"contacts\", JSON.stringify(nextContacts));\n    }\n  }\n\n  addContact = ({ name, number }) => {\n    const sameName = this.state.contacts.find((el) =>\n      el.name.toLowerCase().includes(name.toLowerCase())\n    );\n    const sameNumber = this.state.contacts.find((el) =>\n      el.number.includes(number)\n    );\n\n    if (sameName || sameNumber) {\n      alert(`${name} or ${number} is already in contacts`);\n    } else {\n      const newContact = {\n        id: uuidv4(),\n        name,\n        number,\n      };\n      this.setState(({ contacts }) => ({\n        contacts: [newContact, ...contacts],\n      }));\n    }\n  };\n\n  /* deleteContact = (contactId) => {\n    this.setState((prevState) => ({\n      contacts: prevState.contacts.filter(\n        (contact) => contact.id !== contactId\n      ),\n    }));\n  };\n\n  changeFilter = (e) => {\n    this.setState({ filter: e.currentTarget.value });\n  };*/\n\n/*getVisibleContacts = () => {\n    const { filter, contacts } = this.state;\n    const normalizedFilter = filter.toLowerCase();\n\n    return contacts.filter((contact) =>\n      contact.name.toLowerCase().includes(normalizedFilter)\n    );\n  };\n\n  render() {\n    const { contacts, filter } = this.state;\n    const visibleContacts = this.getVisibleContacts();\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm onSubmit={this.addContact} contacts={contacts} />\n        <h2>Contacts</h2>\n        <Filter value={filter} onChange={this.changeFilter} />\n        <ContactList\n          contacts={visibleContacts}\n          onDeleteContact={this.deleteContact}\n        />\n      </div>\n    );\n  }\n}*/\n","import { combineReducers } from \"redux\";\r\nimport { createReducer } from \"@reduxjs/toolkit\";\r\nimport { addContact, deleteContact, changeFilter } from \"./actions\";\r\n\r\nconst firstContacts = [\r\n  { id: \"id-1\", name: \"Rosie Simpson\", number: \"459-12-56\" },\r\n  { id: \"id-2\", name: \"Hermione Kline\", number: \"443-89-12\" },\r\n  { id: \"id-3\", name: \"Eden Clements\", number: \"645-17-79\" },\r\n  { id: \"id-4\", name: \"Annie Copeland\", number: \"227-91-26\" },\r\n];\r\n\r\nconst items = createReducer(firstContacts, {\r\n  [addContact]: (state, { payload }) => [...state, payload],\r\n  [deleteContact]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\nconst filter = createReducer(\"\", {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n});\r\n","import { configureStore, getDefaultMiddleware } from \"@reduxjs/toolkit\";\r\nimport logger from \"redux-logger\";\r\nimport {\r\n  persistStore,\r\n  persistReducer,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from \"redux-persist\";\r\nimport storage from \"redux-persist/lib/storage\";\r\nimport contactReducer from \"./contacts/reduser\";\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n  logger,\r\n];\r\n\r\nconst contactsPersistConfig = {\r\n  key: \"contacts\",\r\n  storage,\r\n  blacklist: [\"filter\"],\r\n};\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: persistReducer(contactsPersistConfig, contactReducer),\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === \"development\",\r\n});\r\n\r\nconst persistor = persistStore(store);\r\n\r\nexport default { store, persistor };\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider } from \"react-redux\";\nimport \"./index.css\";\nimport { PersistGate } from \"redux-persist/integration/react\";\nimport App from \"./App\";\nimport store from \"./redux/store\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store.store}>\n      <PersistGate loading={null} persistor={store.persistor}>\n        <App />\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"Form_form__3eQRb\",\"label\":\"Form_label__3XEzh\",\"input\":\"Form_input__zIxqx\"};"],"sourceRoot":""}